// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// vi_gauss
List vi_gauss(arma::vec y, arma::mat X, arma::mat A, double lambda_0, double lambda_1, arma::vec v, List inits, double epsilon, int max_iter, double a_sigma, double b_sigma, double a_tau, double b_tau);
RcppExport SEXP _StSS_vi_gauss(SEXP ySEXP, SEXP XSEXP, SEXP ASEXP, SEXP lambda_0SEXP, SEXP lambda_1SEXP, SEXP vSEXP, SEXP initsSEXP, SEXP epsilonSEXP, SEXP max_iterSEXP, SEXP a_sigmaSEXP, SEXP b_sigmaSEXP, SEXP a_tauSEXP, SEXP b_tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type lambda_0(lambda_0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda_1(lambda_1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< List >::type inits(initsSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type a_sigma(a_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type b_sigma(b_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type b_tau(b_tauSEXP);
    rcpp_result_gen = Rcpp::wrap(vi_gauss(y, X, A, lambda_0, lambda_1, v, inits, epsilon, max_iter, a_sigma, b_sigma, a_tau, b_tau));
    return rcpp_result_gen;
END_RCPP
}
// vi_poisson
List vi_poisson(arma::vec y, arma::mat C, arma::vec log_s, double lambda_0, double lambda_1, arma::vec v, List inits, double epsilon, int max_iter, double a, double b);
RcppExport SEXP _StSS_vi_poisson(SEXP ySEXP, SEXP CSEXP, SEXP log_sSEXP, SEXP lambda_0SEXP, SEXP lambda_1SEXP, SEXP vSEXP, SEXP initsSEXP, SEXP epsilonSEXP, SEXP max_iterSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type log_s(log_sSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_0(lambda_0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda_1(lambda_1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< List >::type inits(initsSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(vi_poisson(y, C, log_s, lambda_0, lambda_1, v, inits, epsilon, max_iter, a, b));
    return rcpp_result_gen;
END_RCPP
}
// logistic
double logistic(double x, double lower);
RcppExport SEXP _StSS_logistic(SEXP xSEXP, SEXP lowerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    rcpp_result_gen = Rcpp::wrap(logistic(x, lower));
    return rcpp_result_gen;
END_RCPP
}
// logit
double logit(double x, double lower);
RcppExport SEXP _StSS_logit(SEXP xSEXP, SEXP lowerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    rcpp_result_gen = Rcpp::wrap(logit(x, lower));
    return rcpp_result_gen;
END_RCPP
}
// tri_diagonal
arma::mat tri_diagonal(int n, double rho, double diagVal);
RcppExport SEXP _StSS_tri_diagonal(SEXP nSEXP, SEXP rhoSEXP, SEXP diagValSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type diagVal(diagValSEXP);
    rcpp_result_gen = Rcpp::wrap(tri_diagonal(n, rho, diagVal));
    return rcpp_result_gen;
END_RCPP
}
// beta_mat
arma::mat beta_mat(const arma::vec& muInd, double lambda_0, double lambda_1);
RcppExport SEXP _StSS_beta_mat(SEXP muIndSEXP, SEXP lambda_0SEXP, SEXP lambda_1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type muInd(muIndSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_0(lambda_0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda_1(lambda_1SEXP);
    rcpp_result_gen = Rcpp::wrap(beta_mat(muInd, lambda_0, lambda_1));
    return rcpp_result_gen;
END_RCPP
}
// compute_weight_matrix
arma::mat compute_weight_matrix(const arma::mat& coords, double cutoff);
RcppExport SEXP _StSS_compute_weight_matrix(SEXP coordsSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_weight_matrix(coords, cutoff));
    return rcpp_result_gen;
END_RCPP
}
// hess_q_eta
double hess_q_eta(double eta, arma::vec mu, arma::mat Sigma, arma::vec v);
RcppExport SEXP _StSS_hess_q_eta(SEXP etaSEXP, SEXP muSEXP, SEXP SigmaSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(hess_q_eta(eta, mu, Sigma, v));
    return rcpp_result_gen;
END_RCPP
}
// E_elbo_eta
arma::vec E_elbo_eta(double eta, double eta_var, arma::vec v, int nMC);
RcppExport SEXP _StSS_E_elbo_eta(SEXP etaSEXP, SEXP eta_varSEXP, SEXP vSEXP, SEXP nMCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type eta_var(eta_varSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type nMC(nMCSEXP);
    rcpp_result_gen = Rcpp::wrap(E_elbo_eta(eta, eta_var, v, nMC));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_StSS_vi_gauss", (DL_FUNC) &_StSS_vi_gauss, 13},
    {"_StSS_vi_poisson", (DL_FUNC) &_StSS_vi_poisson, 11},
    {"_StSS_logistic", (DL_FUNC) &_StSS_logistic, 2},
    {"_StSS_logit", (DL_FUNC) &_StSS_logit, 2},
    {"_StSS_tri_diagonal", (DL_FUNC) &_StSS_tri_diagonal, 3},
    {"_StSS_beta_mat", (DL_FUNC) &_StSS_beta_mat, 3},
    {"_StSS_compute_weight_matrix", (DL_FUNC) &_StSS_compute_weight_matrix, 2},
    {"_StSS_hess_q_eta", (DL_FUNC) &_StSS_hess_q_eta, 4},
    {"_StSS_E_elbo_eta", (DL_FUNC) &_StSS_E_elbo_eta, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_StSS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
